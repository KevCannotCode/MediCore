{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kevin\\\\Downloads\\\\MediCore\\\\frontend\\\\src\\\\ComponentsKevin\\\\AppointmentDetails\\\\AppointmentForm.tsx\",\n  _s = $RefreshSig$();\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { Button } from \"../../components/ui/button\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"../../components/ui/form\";\nimport { Input } from \"../../components/ui/input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formSchema = z.object({\n  username: z.string().min(2, {\n    message: \"Username must be at least 2 characters.\"\n  })\n});\nexport function AppointmentForm() {\n  _s();\n  // 1. Define your form.\n  const form = useForm({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      username: \"\"\n    }\n  });\n\n  // 2. Define a submit handler.\n  function onSubmit(values) {\n    // Do something with the form values.\n    // ✅ This will be type-safe and validated.\n    console.log(values);\n  }\n  return /*#__PURE__*/_jsxDEV(Form, {\n    ...form,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: form.handleSubmit(onSubmit),\n      className: \"space-y-8\",\n      children: [/*#__PURE__*/_jsxDEV(FormField, {\n        control: form.control,\n        name: \"username\",\n        render: ({\n          field\n        }) => /*#__PURE__*/_jsxDEV(FormItem, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            children: \"Username\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              placeholder: \"shadcn\",\n              ...field\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormDescription, {\n            children: \"This is your public display name.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(FormMessage, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(AppointmentForm, \"woqMTX6igxsX6/9vX4dQZlxR7yY=\", false, function () {\n  return [useForm];\n});\n_c = AppointmentForm;\nexport default AppointmentForm;\nvar _c;\n$RefreshReg$(_c, \"AppointmentForm\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","zodResolver","useForm","z","Button","Form","FormControl","FormDescription","FormField","FormItem","FormLabel","FormMessage","Input","jsxDEV","_jsxDEV","formSchema","object","username","string","min","message","AppointmentForm","form","resolver","defaultValues","onSubmit","values","console","log","children","handleSubmit","className","control","name","render","field","fileName","lineNumber","columnNumber","placeholder","type","_c","$RefreshReg$"],"sources":["C:/Users/kevin/Downloads/MediCore/frontend/src/ComponentsKevin/AppointmentDetails/AppointmentForm.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { zodResolver } from \"@hookform/resolvers/zod\"\r\nimport { useForm } from \"react-hook-form\"\r\nimport { z } from \"zod\"\r\n\r\nimport { Button } from  \"../../components/ui/button\"\r\nimport {\r\n  Form,\r\n  FormControl,\r\n  FormDescription,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n} from  \"../../components/ui/form\"\r\nimport { Input } from \"../../components/ui/input\"\r\n\r\nconst formSchema = z.object({\r\n  username: z.string().min(2, {\r\n    message: \"Username must be at least 2 characters.\",\r\n  }),\r\n})\r\n\r\nexport function AppointmentForm() {\r\n  // 1. Define your form.\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      username: \"\",\r\n    },\r\n  })\r\n\r\n  // 2. Define a submit handler.\r\n  function onSubmit(values: z.infer<typeof formSchema>) {\r\n    // Do something with the form values.\r\n    // ✅ This will be type-safe and validated.\r\n    console.log(values)\r\n  }\r\n\r\n  return (\r\n    <Form {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\r\n        <FormField\r\n          control={form.control}\r\n          name=\"username\"\r\n          render={({ field }) => (\r\n            <FormItem>\r\n              <FormLabel>Username</FormLabel>\r\n              <FormControl>\r\n                <Input placeholder=\"shadcn\" {...field} />\r\n              </FormControl>\r\n              <FormDescription>\r\n                This is your public display name.\r\n              </FormDescription>\r\n              <FormMessage />\r\n            </FormItem>\r\n          )}\r\n        />\r\n        <Button type=\"submit\">Submit</Button>\r\n      </form>\r\n    </Form>\r\n  )\r\n}\r\n\r\nexport default AppointmentForm;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}