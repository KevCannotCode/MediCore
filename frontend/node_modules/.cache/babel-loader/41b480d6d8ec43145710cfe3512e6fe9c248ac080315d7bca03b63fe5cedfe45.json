{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kevin\\\\Downloads\\\\MediCore\\\\frontend\\\\src\\\\ComponentsKevin\\\\testTable\\\\columns.tsx\";\nimport { Button } from \"../../components/ui/button\";\n\n// Import ShadCN Input\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const columns = [{\n  accessorKey: \"id\",\n  header: \"Appointment ID\"\n}, {\n  accessorKey: \"doctor\",\n  header: \"Doctor\"\n  // cell: ({ row }) => <EditableCell value={row.original.doctor} onChange={(val) => (row.original.doctor = val)} />,\n}, {\n  accessorKey: \"reason_for_appointment\",\n  header: \"Reason for Appointment\"\n  // cell: ({ row }) => <EditableCell value={row.original.reason_for_appointment} onChange={(val) => (row.original.reason_for_appointment = val)} />,\n},\n// {\n//   accessorKey: \"treatment\",\n//   header: \"Treatment\",\n//   cell: ({ row }) => <EditableCell value={row.original.treatment} onChange={(val) => (row.original.treatment = val)} />,\n// },\n{\n  accessorKey: \"date\",\n  header: \"Date\"\n  // cell: ({ row }) => (\n  //   <EditableCell\n  //     type=\"date\"\n  //     value={row.original.date}\n  //     onChange={(val) => (row.original.date = new Date(val))}\n  //   />\n  // ),\n},\n// {\n//   accessorKey: \"allergies\",\n//   header: \"Allergies\",\n//   cell: ({ row }) => <EditableCell value={row.original.allergies} onChange={(val) => (row.original.allergies = val)} />,\n// },\n// {\n//   accessorKey: \"conditions\",\n//   header: \"Conditions\",\n//   cell: ({ row }) => <EditableCell value={row.original.conditions} onChange={(val) => (row.original.conditions = val)} />,\n// },\n// {\n//   accessorKey: \"medications\",\n//   header: \"Medications\",\n//   cell: ({ row }) => <EditableCell value={row.original.medications} onChange={(val) => (row.original.medications = val)} />,\n// },\n// {\n//   accessorKey: \"immunizations\",\n//   header: \"Immunizations\",\n//   cell: ({ row }) => <EditableCell value={row.original.immunizations} onChange={(val) => (row.original.immunizations = val)} />,\n// },\n// {\n//   accessorKey: \"procedures\",\n//   header: \"Procedures\",\n//   cell: ({ row }) => <EditableCell value={row.original.procedures} onChange={(val) => (row.original.procedures = val)} />,\n// },\n{\n  header: \"Edit\",\n  id: \"submit\",\n  cell: ({\n    row\n  }) => {\n    const handleSubmit = () => {\n      console.log(\"Submitting row:\", row.original);\n      // Perform API call or state update here\n    };\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      className: \"bg-blue-500 text-white\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this);\n  }\n}, {\n  header: \"Delete\",\n  id: \"delete\",\n  cell: ({\n    row\n  }) => {\n    const handleDelete = () => {\n      console.log(\"Deleting row:\", row.original);\n      // Perform API call or state update here\n    };\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleDelete,\n      className: \"bg-red-500 text-white\",\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this);\n  }\n}];","map":{"version":3,"names":["_jsxFileName","Button","jsxDEV","_jsxDEV","columns","accessorKey","header","id","cell","row","handleSubmit","console","log","original","onClick","className","children","fileName","lineNumber","columnNumber","handleDelete"],"sources":["C:/Users/kevin/Downloads/MediCore/frontend/src/ComponentsKevin/testTable/columns.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { ColumnDef } from \"@tanstack/react-table\"\r\n\r\nimport { MoreHorizontal } from \"lucide-react\"\r\n \r\nimport { Button } from \"../../components/ui/button\"\r\n\r\nimport { Input } from \"../../components/ui/input\"; // Import ShadCN Input\r\n\r\nimport EditableCell from \"./EditableCell\";\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"../../components/ui/dropdown-menu\"\r\n\r\n// This type is used to define the shape of our data.\r\n// You can use a Zod schema here if you want.\r\nexport type AppointmentEntry = {\r\n  id: string\r\n  doctor: string\r\n  reason_for_appointment: string,\r\n  treatment: string,\r\n  date: Date,\r\n  allergies: string,\r\n  conditions: string,\r\n  medications: string,\r\n  immunizations: string,\r\n  procedures: string\r\n}\r\n\r\nexport const columns: ColumnDef<AppointmentEntry>[] = [\r\n  {\r\n    accessorKey: \"id\",\r\n    header: \"Appointment ID\",\r\n  },\r\n  {\r\n    accessorKey: \"doctor\",\r\n    header: \"Doctor\",\r\n    // cell: ({ row }) => <EditableCell value={row.original.doctor} onChange={(val) => (row.original.doctor = val)} />,\r\n  },\r\n  {\r\n    accessorKey: \"reason_for_appointment\",\r\n    header: \"Reason for Appointment\",\r\n    // cell: ({ row }) => <EditableCell value={row.original.reason_for_appointment} onChange={(val) => (row.original.reason_for_appointment = val)} />,\r\n  },\r\n  // {\r\n  //   accessorKey: \"treatment\",\r\n  //   header: \"Treatment\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.treatment} onChange={(val) => (row.original.treatment = val)} />,\r\n  // },\r\n  {\r\n    accessorKey: \"date\",\r\n    header: \"Date\",\r\n    // cell: ({ row }) => (\r\n    //   <EditableCell\r\n    //     type=\"date\"\r\n    //     value={row.original.date}\r\n    //     onChange={(val) => (row.original.date = new Date(val))}\r\n    //   />\r\n    // ),\r\n  },\r\n  // {\r\n  //   accessorKey: \"allergies\",\r\n  //   header: \"Allergies\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.allergies} onChange={(val) => (row.original.allergies = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"conditions\",\r\n  //   header: \"Conditions\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.conditions} onChange={(val) => (row.original.conditions = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"medications\",\r\n  //   header: \"Medications\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.medications} onChange={(val) => (row.original.medications = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"immunizations\",\r\n  //   header: \"Immunizations\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.immunizations} onChange={(val) => (row.original.immunizations = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"procedures\",\r\n  //   header: \"Procedures\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.procedures} onChange={(val) => (row.original.procedures = val)} />,\r\n  // },\r\n  {\r\n    header: \"Edit\",\r\n    id: \"submit\",\r\n    cell: ({ row }) => {\r\n      const handleSubmit = () => {\r\n        console.log(\"Submitting row:\", row.original);\r\n        // Perform API call or state update here\r\n      };\r\n\r\n      return (\r\n        <Button\r\n          onClick={handleSubmit}\r\n          className=\"bg-blue-500 text-white\"\r\n        >\r\n          Submit\r\n        </Button>\r\n      );\r\n    }\r\n  },\r\n  {\r\n    header: \"Delete\",\r\n    id: \"delete\",\r\n    cell: ({ row }) => {\r\n      const handleDelete = () => {\r\n        console.log(\"Deleting row:\", row.original);\r\n        // Perform API call or state update here\r\n      };\r\n\r\n      return (\r\n        <Button\r\n          onClick={handleDelete}\r\n          className=\"bg-red-500 text-white\"\r\n        >\r\n          Delete\r\n        </Button>\r\n      );\r\n    }\r\n  },\r\n]\r\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;AAMZ,SAASC,MAAM,QAAQ,4BAA4B;;AAEA;;AAanD;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAcA,OAAO,MAAMC,OAAsC,GAAG,CACpD;EACEC,WAAW,EAAE,IAAI;EACjBC,MAAM,EAAE;AACV,CAAC,EACD;EACED,WAAW,EAAE,QAAQ;EACrBC,MAAM,EAAE;EACR;AACF,CAAC,EACD;EACED,WAAW,EAAE,wBAAwB;EACrCC,MAAM,EAAE;EACR;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;EACED,WAAW,EAAE,MAAM;EACnBC,MAAM,EAAE;EACR;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEA,MAAM,EAAE,MAAM;EACdC,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAEA,CAAC;IAAEC;EAAI,CAAC,KAAK;IACjB,MAAMC,YAAY,GAAGA,CAAA,KAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,GAAG,CAACI,QAAQ,CAAC;MAC5C;IACF,CAAC;IAED,oBACEV,OAAA,CAACF,MAAM;MACLa,OAAO,EAAEJ,YAAa;MACtBK,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EACnC;IAED;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAEb;AACF,CAAC,EACD;EACEb,MAAM,EAAE,QAAQ;EAChBC,EAAE,EAAE,QAAQ;EACZC,IAAI,EAAEA,CAAC;IAAEC;EAAI,CAAC,KAAK;IACjB,MAAMW,YAAY,GAAGA,CAAA,KAAM;MACzBT,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,GAAG,CAACI,QAAQ,CAAC;MAC1C;IACF,CAAC;IAED,oBACEV,OAAA,CAACF,MAAM;MACLa,OAAO,EAAEM,YAAa;MACtBL,SAAS,EAAC,uBAAuB;MAAAC,QAAA,EAClC;IAED;MAAAC,QAAA,EAAAjB,YAAA;MAAAkB,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAEb;AACF,CAAC,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}