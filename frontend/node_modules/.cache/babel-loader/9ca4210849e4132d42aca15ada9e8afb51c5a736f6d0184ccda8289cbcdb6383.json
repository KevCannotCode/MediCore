{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kevin\\\\Downloads\\\\MediCore\\\\frontend\\\\src\\\\ComponentsKevin\\\\testTable\\\\columns.tsx\";\nimport { Button } from \"../../components/ui/button\";\n\n// Import ShadCN Input\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const columns = [{\n  accessorKey: \"_id\",\n  header: \"Appointment ID\"\n}, {\n  accessorKey: \"patientName\",\n  header: \"Patient\"\n  // cell: ({ row }) => <EditableCell value={row.original.patient} onChange={(val) => (row.original.patient = val)} />,\n}, {\n  accessorKey: \"doctorName\",\n  header: \"Doctor\"\n  // cell: ({ row }) => <EditableCell value={row.original.doctor} onChange={(val) => (row.original.doctor = val)} />,\n}, {\n  accessorKey: \"reason_for_appointment\",\n  header: \"Reason for Appointment\"\n  // cell: ({ row }) => <EditableCell value={row.original.reason_for_appointment} onChange={(val) => (row.original.reason_for_appointment = val)} />,\n},\n// {\n//   accessorKey: \"treatment\",\n//   header: \"Treatment\",\n//   cell: ({ row }) => <EditableCell value={row.original.treatment} onChange={(val) => (row.original.treatment = val)} />,\n// },\n{\n  accessorKey: \"date\",\n  header: \"Date\"\n  // cell: ({ row }) => (\n  //   <EditableCell\n  //     type=\"date\"\n  //     value={row.original.date}\n  //     onChange={(val) => (row.original.date = new Date(val))}\n  //   />\n  // ),\n},\n// {\n//   accessorKey: \"allergies\",\n//   header: \"Allergies\",\n//   cell: ({ row }) => <EditableCell value={row.original.allergies} onChange={(val) => (row.original.allergies = val)} />,\n// },\n// {\n//   accessorKey: \"conditions\",\n//   header: \"Conditions\",\n//   cell: ({ row }) => <EditableCell value={row.original.conditions} onChange={(val) => (row.original.conditions = val)} />,\n// },\n// {\n//   accessorKey: \"medications\",\n//   header: \"Medications\",\n//   cell: ({ row }) => <EditableCell value={row.original.medications} onChange={(val) => (row.original.medications = val)} />,\n// },\n// {\n//   accessorKey: \"immunizations\",\n//   header: \"Immunizations\",\n//   cell: ({ row }) => <EditableCell value={row.original.immunizations} onChange={(val) => (row.original.immunizations = val)} />,\n// },\n// {\n//   accessorKey: \"procedures\",\n//   header: \"Procedures\",\n//   cell: ({ row }) => <EditableCell value={row.original.procedures} onChange={(val) => (row.original.procedures = val)} />,\n// },\n{\n  header: \"Edit\",\n  id: \"edit\",\n  cell: ({\n    row\n  }) => {\n    const handleSubmit = async () => {\n      console.log(\"Submitting row:\", row.original);\n\n      // Retrieve JWT token from storage (e.g., localStorage)\n      let token = localStorage.getItem(\"token\");\n      if (token && token.startsWith(\"Bearer \")) {\n        token = token.slice(7);\n      }\n      try {\n        const response = await fetch(`http://localhost:8080/Appointments/doctorUpdate/${row.original._id}/${row.original.medicalRecord}`, {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: token ? `Bearer ${token}` : \"\"\n          },\n          body: JSON.stringify({\n            treatment: row.original.treatment,\n            notes: row.original.notes,\n            allergies: row.original.allergies,\n            conditions: row.original.conditions,\n            medications: row.original.medications,\n            immunizations: row.original.immunizations,\n            procedures: row.original.procedures\n          })\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(\"Server error:\", errorText);\n          alert(`Error: ${response.status} - ${errorText}`);\n          return;\n        }\n        const result = await response.json();\n        alert(result.message || \"Update successful!\"); // Show success message\n      } catch (error) {\n        console.error(\"Error updating appointment:\", error);\n        alert(\"An error occurred. Please try again.\");\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      className: \"bg-blue-500 text-white\",\n      children: \"More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }, this);\n  }\n}];","map":{"version":3,"names":["_jsxFileName","Button","jsxDEV","_jsxDEV","columns","accessorKey","header","id","cell","row","handleSubmit","console","log","original","token","localStorage","getItem","startsWith","slice","response","fetch","_id","medicalRecord","method","headers","Authorization","body","JSON","stringify","treatment","notes","allergies","conditions","medications","immunizations","procedures","ok","errorText","text","error","alert","status","result","json","message","onClick","className","children","fileName","lineNumber","columnNumber"],"sources":["C:/Users/kevin/Downloads/MediCore/frontend/src/ComponentsKevin/testTable/columns.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { ColumnDef } from \"@tanstack/react-table\"\r\n\r\nimport { MoreHorizontal } from \"lucide-react\"\r\n \r\nimport { Button } from \"../../components/ui/button\"\r\n\r\nimport { Input } from \"../../components/ui/input\"; // Import ShadCN Input\r\n\r\nimport EditableCell from \"./EditableCell\";\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"../../components/ui/dropdown-menu\"\r\n\r\n// This type is used to define the shape of our data.\r\n// You can use a Zod schema here if you want.\r\nexport type AppointmentEntry = {\r\n  _id: string\r\n  date: Date\r\n  reason_for_appointment: string,\r\n  treatment: string,\r\n  notes: string,\r\n  allergies: string,\r\n  conditions: string,\r\n  medications: string,\r\n  immunizations: string,\r\n  procedures: string,\r\n  doctorName: string,\r\n  patientName: string,\r\n}\r\n\r\nexport const columns: ColumnDef<AppointmentEntry>[] = [\r\n  {\r\n    accessorKey: \"_id\",\r\n    header: \"Appointment ID\",\r\n  },\r\n  {\r\n    accessorKey: \"patientName\",\r\n    header: \"Patient\",\r\n    // cell: ({ row }) => <EditableCell value={row.original.patient} onChange={(val) => (row.original.patient = val)} />,\r\n  },\r\n  {\r\n    accessorKey: \"doctorName\",\r\n    header: \"Doctor\",\r\n    // cell: ({ row }) => <EditableCell value={row.original.doctor} onChange={(val) => (row.original.doctor = val)} />,\r\n  },\r\n  {\r\n    accessorKey: \"reason_for_appointment\",\r\n    header: \"Reason for Appointment\",\r\n    // cell: ({ row }) => <EditableCell value={row.original.reason_for_appointment} onChange={(val) => (row.original.reason_for_appointment = val)} />,\r\n  },\r\n  // {\r\n  //   accessorKey: \"treatment\",\r\n  //   header: \"Treatment\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.treatment} onChange={(val) => (row.original.treatment = val)} />,\r\n  // },\r\n  {\r\n    accessorKey: \"date\",\r\n    header: \"Date\",\r\n    // cell: ({ row }) => (\r\n    //   <EditableCell\r\n    //     type=\"date\"\r\n    //     value={row.original.date}\r\n    //     onChange={(val) => (row.original.date = new Date(val))}\r\n    //   />\r\n    // ),\r\n  },\r\n  // {\r\n  //   accessorKey: \"allergies\",\r\n  //   header: \"Allergies\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.allergies} onChange={(val) => (row.original.allergies = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"conditions\",\r\n  //   header: \"Conditions\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.conditions} onChange={(val) => (row.original.conditions = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"medications\",\r\n  //   header: \"Medications\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.medications} onChange={(val) => (row.original.medications = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"immunizations\",\r\n  //   header: \"Immunizations\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.immunizations} onChange={(val) => (row.original.immunizations = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"procedures\",\r\n  //   header: \"Procedures\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.procedures} onChange={(val) => (row.original.procedures = val)} />,\r\n  // },\r\n  {\r\n    header: \"Edit\",\r\n    id: \"edit\",\r\n    cell: ({ row }) => {\r\n      const handleSubmit = async (): Promise<void> => {\r\n        console.log(\"Submitting row:\", row.original);\r\n      \r\n        // Retrieve JWT token from storage (e.g., localStorage)\r\n        let token: string | null = localStorage.getItem(\"token\");\r\n        if (token && token.startsWith(\"Bearer \")) {\r\n          token = token.slice(7);\r\n        }\r\n      \r\n        try {\r\n          const response: Response = await fetch(\r\n            `http://localhost:8080/Appointments/doctorUpdate/${row.original._id}/${row.original.medicalRecord}`,\r\n            {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                Authorization: token ? `Bearer ${token}` : \"\",\r\n              },\r\n              body: JSON.stringify({\r\n                treatment: row.original.treatment,\r\n                notes: row.original.notes,\r\n                allergies: row.original.allergies,\r\n                conditions: row.original.conditions,\r\n                medications: row.original.medications,\r\n                immunizations: row.original.immunizations,\r\n                procedures: row.original.procedures,\r\n              }),\r\n            }\r\n          );\r\n      \r\n          if (!response.ok) {\r\n            const errorText: string = await response.text();\r\n            console.error(\"Server error:\", errorText);\r\n            alert(`Error: ${response.status} - ${errorText}`);\r\n            return;\r\n          }\r\n      \r\n          const result = await response.json();\r\n          alert(result.message || \"Update successful!\"); // Show success message\r\n        } catch (error) {\r\n          console.error(\"Error updating appointment:\", error);\r\n          alert(\"An error occurred. Please try again.\");\r\n        }\r\n      };\r\n\r\n      return (\r\n        <Button\r\n          onClick={handleSubmit}\r\n          className=\"bg-blue-500 text-white\"\r\n        >\r\n          More\r\n        </Button>\r\n      );\r\n    }\r\n  },\r\n]\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}