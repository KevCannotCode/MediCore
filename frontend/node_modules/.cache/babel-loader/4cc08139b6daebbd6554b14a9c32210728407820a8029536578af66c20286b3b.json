{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\kevin\\\\Downloads\\\\MediCore\\\\frontend\\\\src\\\\ComponentsKevin\\\\testTable\\\\columns.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { Button } from \"../../components/ui/button\";\n\n// Import ShadCN Input\n\nimport { useNavigate } from \"react-router-dom\";\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// custom hook for row navigation\nexport const useRowNavigation = () => {\n  _s();\n  const navigate = useNavigate();\n  const navigateToDetails = id => {\n    navigate(`/appointments/${id}`);\n  };\n  return {\n    navigateToDetails\n  };\n};\n_s(useRowNavigation, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\nexport const columns = [{\n  accessorKey: \"_id\",\n  header: \"Appointment ID\"\n}, {\n  accessorKey: \"patientName\",\n  header: \"Patient\"\n  // cell: ({ row }) => <EditableCell value={row.original.patient} onChange={(val) => (row.original.patient = val)} />,\n}, {\n  accessorKey: \"doctorName\",\n  header: \"Doctor\"\n  // cell: ({ row }) => <EditableCell value={row.original.doctor} onChange={(val) => (row.original.doctor = val)} />,\n}, {\n  accessorKey: \"reason_for_appointment\",\n  header: \"Reason for Appointment\"\n  // cell: ({ row }) => <EditableCell value={row.original.reason_for_appointment} onChange={(val) => (row.original.reason_for_appointment = val)} />,\n},\n// {\n//   accessorKey: \"treatment\",\n//   header: \"Treatment\",\n//   cell: ({ row }) => <EditableCell value={row.original.treatment} onChange={(val) => (row.original.treatment = val)} />,\n// },\n{\n  accessorKey: \"date\",\n  header: \"Date\"\n  // cell: ({ row }) => (\n  //   <EditableCell\n  //     type=\"date\"\n  //     value={row.original.date}\n  //     onChange={(val) => (row.original.date = new Date(val))}\n  //   />\n  // ),\n},\n// {\n//   accessorKey: \"allergies\",\n//   header: \"Allergies\",\n//   cell: ({ row }) => <EditableCell value={row.original.allergies} onChange={(val) => (row.original.allergies = val)} />,\n// },\n// {\n//   accessorKey: \"conditions\",\n//   header: \"Conditions\",\n//   cell: ({ row }) => <EditableCell value={row.original.conditions} onChange={(val) => (row.original.conditions = val)} />,\n// },\n// {\n//   accessorKey: \"medications\",\n//   header: \"Medications\",\n//   cell: ({ row }) => <EditableCell value={row.original.medications} onChange={(val) => (row.original.medications = val)} />,\n// },\n// {\n//   accessorKey: \"immunizations\",\n//   header: \"Immunizations\",\n//   cell: ({ row }) => <EditableCell value={row.original.immunizations} onChange={(val) => (row.original.immunizations = val)} />,\n// },\n// {\n//   accessorKey: \"procedures\",\n//   header: \"Procedures\",\n//   cell: ({ row }) => <EditableCell value={row.original.procedures} onChange={(val) => (row.original.procedures = val)} />,\n// },\n{\n  header: \"Edit\",\n  id: \"edit\",\n  cell: _s2(({\n    row\n  }) => {\n    _s2();\n    const {\n      navigateToDetails\n    } = useRowNavigation();\n    const handleSubmit = () => {\n      navigateToDetails(row.original._id);\n    };\n    return /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleSubmit,\n      className: \"bg-blue-500 text-white\",\n      children: \"More\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }, this);\n  }, \"KRYOBv61Tp6xAICPktf1gm8ttTE=\", false, function () {\n    return [useRowNavigation];\n  })\n}];","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","_s2","Button","useNavigate","jsxDEV","_jsxDEV","useRowNavigation","navigate","navigateToDetails","id","columns","accessorKey","header","cell","row","handleSubmit","original","_id","onClick","className","children","fileName","lineNumber","columnNumber"],"sources":["C:/Users/kevin/Downloads/MediCore/frontend/src/ComponentsKevin/testTable/columns.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { ColumnDef } from \"@tanstack/react-table\"\r\n\r\nimport { MoreHorizontal } from \"lucide-react\"\r\n \r\nimport { Button } from \"../../components/ui/button\"\r\n\r\nimport { Input } from \"../../components/ui/input\"; // Import ShadCN Input\r\n\r\nimport EditableCell from \"./EditableCell\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"../../components/ui/dropdown-menu\"\r\n\r\n// This type is used to define the shape of our data.\r\n// You can use a Zod schema here if you want.\r\nexport type AppointmentEntry = {\r\n  _id: string\r\n  date: Date\r\n  reason_for_appointment: string,\r\n  treatment: string,\r\n  notes: string,\r\n  allergies: string,\r\n  conditions: string,\r\n  medications: string,\r\n  immunizations: string,\r\n  procedures: string,\r\n  doctorName: string,\r\n  patientName: string,\r\n}\r\n\r\n// custom hook for row navigation\r\nexport const useRowNavigation = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const navigateToDetails = (id: string): void => {\r\n    navigate(`/appointments/${id}`);\r\n  };\r\n\r\n  return { navigateToDetails };\r\n};\r\n\r\nexport const columns: ColumnDef<AppointmentEntry>[] = [\r\n  {\r\n    accessorKey: \"_id\",\r\n    header: \"Appointment ID\",\r\n  },\r\n  {\r\n    accessorKey: \"patientName\",\r\n    header: \"Patient\",\r\n    // cell: ({ row }) => <EditableCell value={row.original.patient} onChange={(val) => (row.original.patient = val)} />,\r\n  },\r\n  {\r\n    accessorKey: \"doctorName\",\r\n    header: \"Doctor\",\r\n    // cell: ({ row }) => <EditableCell value={row.original.doctor} onChange={(val) => (row.original.doctor = val)} />,\r\n  },\r\n  {\r\n    accessorKey: \"reason_for_appointment\",\r\n    header: \"Reason for Appointment\",\r\n    // cell: ({ row }) => <EditableCell value={row.original.reason_for_appointment} onChange={(val) => (row.original.reason_for_appointment = val)} />,\r\n  },\r\n  // {\r\n  //   accessorKey: \"treatment\",\r\n  //   header: \"Treatment\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.treatment} onChange={(val) => (row.original.treatment = val)} />,\r\n  // },\r\n  {\r\n    accessorKey: \"date\",\r\n    header: \"Date\",\r\n    // cell: ({ row }) => (\r\n    //   <EditableCell\r\n    //     type=\"date\"\r\n    //     value={row.original.date}\r\n    //     onChange={(val) => (row.original.date = new Date(val))}\r\n    //   />\r\n    // ),\r\n  },\r\n  // {\r\n  //   accessorKey: \"allergies\",\r\n  //   header: \"Allergies\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.allergies} onChange={(val) => (row.original.allergies = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"conditions\",\r\n  //   header: \"Conditions\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.conditions} onChange={(val) => (row.original.conditions = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"medications\",\r\n  //   header: \"Medications\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.medications} onChange={(val) => (row.original.medications = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"immunizations\",\r\n  //   header: \"Immunizations\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.immunizations} onChange={(val) => (row.original.immunizations = val)} />,\r\n  // },\r\n  // {\r\n  //   accessorKey: \"procedures\",\r\n  //   header: \"Procedures\",\r\n  //   cell: ({ row }) => <EditableCell value={row.original.procedures} onChange={(val) => (row.original.procedures = val)} />,\r\n  // },\r\n  {\r\n    header: \"Edit\",\r\n    id: \"edit\",\r\n    cell: ({ row }) => {\r\n      const { navigateToDetails } = useRowNavigation();\r\n\r\n      const handleSubmit = (): void => {\r\n        navigateToDetails(row.original._id);\r\n      };\r\n\r\n      return (\r\n        <Button onClick={handleSubmit} className=\"bg-blue-500 text-white\">\r\n          More\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n]\r\n"],"mappings":"AAAA,YAAY;;AAAA,IAAAA,YAAA;EAAAC,EAAA,GAAAC,YAAA;EAAAC,GAAA,GAAAD,YAAA;AAMZ,SAASE,MAAM,QAAQ,4BAA4B;;AAEA;;AAInD,SAASC,WAAW,QAAQ,kBAAkB;;AAW9C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAgBA;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAP,EAAA;EACpC,MAAMQ,QAAQ,GAAGJ,WAAW,CAAC,CAAC;EAE9B,MAAMK,iBAAiB,GAAIC,EAAU,IAAW;IAC9CF,QAAQ,CAAC,iBAAiBE,EAAE,EAAE,CAAC;EACjC,CAAC;EAED,OAAO;IAAED;EAAkB,CAAC;AAC9B,CAAC;AAACT,EAAA,CARWO,gBAAgB;EAAA,QACVH,WAAW;AAAA;AAS9B,OAAO,MAAMO,OAAsC,GAAG,CACpD;EACEC,WAAW,EAAE,KAAK;EAClBC,MAAM,EAAE;AACV,CAAC,EACD;EACED,WAAW,EAAE,aAAa;EAC1BC,MAAM,EAAE;EACR;AACF,CAAC,EACD;EACED,WAAW,EAAE,YAAY;EACzBC,MAAM,EAAE;EACR;AACF,CAAC,EACD;EACED,WAAW,EAAE,wBAAwB;EACrCC,MAAM,EAAE;EACR;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;EACED,WAAW,EAAE,MAAM;EACnBC,MAAM,EAAE;EACR;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEA,MAAM,EAAE,MAAM;EACdH,EAAE,EAAE,MAAM;EACVI,IAAI,EAAAZ,GAAA,CAAE,CAAC;IAAEa;EAAI,CAAC,KAAK;IAAAb,GAAA;IACjB,MAAM;MAAEO;IAAkB,CAAC,GAAGF,gBAAgB,CAAC,CAAC;IAEhD,MAAMS,YAAY,GAAGA,CAAA,KAAY;MAC/BP,iBAAiB,CAACM,GAAG,CAACE,QAAQ,CAACC,GAAG,CAAC;IACrC,CAAC;IAED,oBACEZ,OAAA,CAACH,MAAM;MAACgB,OAAO,EAAEH,YAAa;MAACI,SAAS,EAAC,wBAAwB;MAAAC,QAAA,EAAC;IAElE;MAAAC,QAAA,EAAAvB,YAAA;MAAAwB,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAEb,CAAC;IAAA,QAX+BjB,gBAAgB;EAAA;AAYlD,CAAC,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}