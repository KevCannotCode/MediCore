{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\Downloads\\\\MediCore\\\\frontend\\\\src\\\\ComponentsKevin\\\\ModifyAppointmentUser.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"../styles/appointment_styles.css\"; // Add your styles here if needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ModifyAppointment = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    time: \"\",\n    doctorEmail: \"\",\n    message: \"\"\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Retrieve JWT token from storage (e.g., localStorage)\n    let token = localStorage.getItem(\"token\"); // Replace with your storage method if different\n    if (token && token.startsWith(\"Bearer \")) {\n      token = token.slice(7);\n    }\n    try {\n      const response = await fetch(\"http://localhost:8080/Appointments/createAppointment\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: token // Include JWT token in the Authorization header\n        },\n        body: JSON.stringify({\n          doctorEmail: formData.email,\n          // Map `doctor` field to `doctorEmail`\n          date: formData.time,\n          // Map `meetingTime` field to `date`\n          reason_for_appointment: formData.message // Map `message` field to `reason_for_appointment`\n        })\n      });\n      if (!response.ok) {\n        // Handle non-200 responses\n        const errorText = await response.text(); // Get error response as plain text\n        console.error(\"Server error:\", errorText);\n        alert(`Error: ${response.status} - ${errorText}`);\n        return;\n      }\n      const result = await response.json();\n      alert(result[0].message); // Show success message\n    } catch (error) {\n      console.error(\"Error creating appointment:\", error);\n      alert(\"An error occurred. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    className: \"form-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Change Existing Appointment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n        children: \"Feel free to select a time and day to meet your primary care provider!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Doctor Email:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        name: \"email\",\n        value: formData.email,\n        onChange: handleChange,\n        className: \"form-input\" /* Using className for styling the input field */\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"time\",\n        children: \"Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"datetime-local\",\n        id: \"time\",\n        name: \"time\",\n        min: \"2024-25-07T00:00\",\n        max: \"2030-12-14T00:00\",\n        value: formData.time,\n        onChange: handleChange,\n        className: \"form-input\" /* Same styling for this input */\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"message\",\n        children: \"Reason For Appointment:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"message\",\n        name: \"message\",\n        value: formData.message,\n        onChange: handleChange,\n        className: \"form-input\" /* Reusing the form-input class for consistency */\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"submit-button\" /* Unique class for styling the submit button */,\n      children: \"Modify Appointment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 7\n  }, this);\n};\n_s(ModifyAppointment, \"KMAe8DUVH4z9U2rpeW9zFD3id5Q=\");\n_c = ModifyAppointment;\nexport default ModifyAppointment;\nvar _c;\n$RefreshReg$(_c, \"ModifyAppointment\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ModifyAppointment","_s","formData","setFormData","time","doctorEmail","message","handleChange","e","name","value","target","prevData","handleSubmit","preventDefault","token","localStorage","getItem","startsWith","slice","response","fetch","method","headers","Authorization","body","JSON","stringify","email","date","reason_for_appointment","ok","errorText","text","console","error","alert","status","result","json","onSubmit","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","type","id","onChange","min","max","_c","$RefreshReg$"],"sources":["C:/Users/kevin/Downloads/MediCore/frontend/src/ComponentsKevin/ModifyAppointmentUser.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"../styles/appointment_styles.css\"; // Add your styles here if needed\r\n\r\nconst ModifyAppointment = () => {\r\n  const [formData, setFormData] = useState({\r\n    time: \"\",\r\n    doctorEmail: \"\",\r\n    message: \"\"\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({\r\n      ...prevData,\r\n      [name]: value\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n  \r\n    // Retrieve JWT token from storage (e.g., localStorage)\r\n    let token = localStorage.getItem(\"token\"); // Replace with your storage method if different\r\n    if (token && token.startsWith(\"Bearer \")) {\r\n      token = token.slice(7);\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:8080/Appointments/createAppointment\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          Authorization: token, // Include JWT token in the Authorization header\r\n        },\r\n        body: JSON.stringify({\r\n          doctorEmail: formData.email, // Map `doctor` field to `doctorEmail`\r\n          date: formData.time, // Map `meetingTime` field to `date`\r\n          reason_for_appointment: formData.message, // Map `message` field to `reason_for_appointment`\r\n        }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        // Handle non-200 responses\r\n        const errorText = await response.text(); // Get error response as plain text\r\n        console.error(\"Server error:\", errorText);\r\n        alert(`Error: ${response.status} - ${errorText}`);\r\n        return;\r\n      }\r\n  \r\n      const result = await response.json();\r\n      alert(result[0].message); // Show success message\r\n    } catch (error) {\r\n      console.error(\"Error creating appointment:\", error);\r\n      alert(\"An error occurred. Please try again.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n      <form \r\n    onSubmit={handleSubmit} \r\n    className=\"form-card\"\r\n  > \r\n    <div>\r\n      <h2>Change Existing Appointment</h2>\r\n      <text>Feel free to select a time and day to meet your primary care provider!</text>\r\n    </div>\r\n    <div \r\n      className=\"form-group\"\r\n    >\r\n      <label htmlFor=\"email\">Doctor Email:</label>\r\n      <input\r\n        type=\"email\"\r\n        id=\"email\"\r\n        name=\"email\"\r\n        value={formData.email}\r\n        onChange={handleChange}\r\n        className=\"form-input\" /* Using className for styling the input field */\r\n      />\r\n    </div>\r\n    \r\n    <div \r\n      className=\"form-group\"\r\n    >\r\n      <label htmlFor=\"time\">Date:</label>\r\n      <input\r\n        type=\"datetime-local\"\r\n        id=\"time\"\r\n        name=\"time\"\r\n        min=\"2024-25-07T00:00\"\r\n        max=\"2030-12-14T00:00\"\r\n        value={formData.time}\r\n        onChange={handleChange}\r\n        className=\"form-input\" /* Same styling for this input */\r\n      />\r\n    </div>\r\n\r\n    <div \r\n      className=\"form-group\"\r\n    >\r\n      <label htmlFor=\"message\">Reason For Appointment:</label>\r\n      <textarea\r\n        id=\"message\"\r\n        name=\"message\"\r\n        value={formData.message}\r\n        onChange={handleChange}\r\n        className=\"form-input\" /* Reusing the form-input class for consistency */\r\n      />\r\n    </div>\r\n\r\n    <button \r\n      type=\"submit\"\r\n      className=\"submit-button\" /* Unique class for styling the submit button */\r\n    >\r\n      Modify Appointment\r\n    </button>\r\n  </form>\r\n  );\r\n};\r\n\r\nexport default ModifyAppointment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}